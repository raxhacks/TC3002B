package main

import "fmt"

func main() {
	// Test Stack with integers
	fmt.Println("=== Testing Stack Implementation with Integers ===")
	stackInt := NewStack[int]()
	stackInt.Push(1)
	stackInt.Push(2)
	stackInt.Push(3)
	fmt.Print("Stack after pushing 1,2,3: ")
	stackInt.Print()
	fmt.Printf("Popped value: %d\n", stackInt.Pop())
	fmt.Printf("Popped value: %d\n", stackInt.Pop())
	fmt.Print("Stack after pop: ")
	stackInt.Print()
	fmt.Printf("Peek value: %d\n", stackInt.Peek())
	fmt.Printf("Is stack empty?: %v\n", stackInt.IsEmpty())
	fmt.Printf("Stack size: %d\n", stackInt.Size())
	stackInt.Clear()
	fmt.Printf("Is stack empty after clear?: %v\n", stackInt.IsEmpty())

	// Test Queue with integers
	fmt.Println("\n=== Testing Queue Implementation with Integers ===")
	queueInt := NewQueue[int]()
	queueInt.Enqueue(1)
	queueInt.Enqueue(2)
	queueInt.Enqueue(3)
	fmt.Print("Queue after adding 1,2,3: ")
	queueInt.Print()
	fmt.Printf("Dequeued value: %d\n", queueInt.Dequeue())
	fmt.Printf("Dequeued value: %d\n", queueInt.Dequeue())
	fmt.Print("Queue after dequeue: ")
	queueInt.Print()
	fmt.Printf("Front value: %d\n", queueInt.Front())
	fmt.Printf("Is queue empty?: %v\n", queueInt.IsEmpty())
	fmt.Printf("Queue size: %d\n", queueInt.Size())
	queueInt.Clear()
	fmt.Printf("Is queue empty?: %v\n", queueInt.IsEmpty())

	// Test Queue with strings
	fmt.Println("\n=== Testing Queue Implementation with Strings ===")
	queueStr := NewQueue[string]()
	queueStr.Enqueue("Hello")
	queueStr.Enqueue("World")
	queueStr.Enqueue("!")
	fmt.Print("Queue after adding Hello,World,!: ")
	queueStr.Print()
	fmt.Printf("Dequeued value: %s\n", queueStr.Dequeue())
	fmt.Printf("Dequeued value: %s\n", queueStr.Dequeue())
	fmt.Print("Queue after dequeue: ")
	queueStr.Print()
	fmt.Printf("Front value: %s\n", queueStr.Front())
	fmt.Printf("Is queue empty?: %v\n", queueStr.IsEmpty())
	fmt.Printf("Queue size: %d\n", queueStr.Size())
	queueStr.Clear()
	fmt.Printf("Is queue empty?: %v\n", queueStr.IsEmpty())

	// Test Dictionary with string keys and string values
	fmt.Println("\n=== Testing Dictionary Implementation with String Keys and Values ===")
	dictStrStr := NewDictionary[string, string]()
	dictStrStr.Add("key1", "value1")
	dictStrStr.Add("key2", "value2")
	dictStrStr.Add("key3", "value3")
	fmt.Print("Current dictionary contents:")
	dictStrStr.Print()
	dictStrStr.Remove("key2")
	fmt.Print("Dictionary after removing key2:")
	dictStrStr.Print()
	fmt.Printf("Value for key1: %v\n", dictStrStr.Get("key1"))
	fmt.Printf("key4 exists in dictionary: %v\n", dictStrStr.Contains("key4"))
}
